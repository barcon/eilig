# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _eilig
else:
    import _eilig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _eilig.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eilig.delete_SwigPyIterator

    def value(self):
        return _eilig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _eilig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _eilig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _eilig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _eilig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _eilig.SwigPyIterator_copy(self)

    def next(self):
        return _eilig.SwigPyIterator_next(self)

    def __next__(self):
        return _eilig.SwigPyIterator___next__(self)

    def previous(self):
        return _eilig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _eilig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _eilig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _eilig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _eilig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _eilig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _eilig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _eilig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _eilig:
_eilig.SwigPyIterator_swigregister(SwigPyIterator)
class vecSizeT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _eilig.vecSizeT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _eilig.vecSizeT___nonzero__(self)

    def __bool__(self):
        return _eilig.vecSizeT___bool__(self)

    def __len__(self):
        return _eilig.vecSizeT___len__(self)

    def __getslice__(self, i, j):
        return _eilig.vecSizeT___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _eilig.vecSizeT___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _eilig.vecSizeT___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _eilig.vecSizeT___delitem__(self, *args)

    def __getitem__(self, *args):
        return _eilig.vecSizeT___getitem__(self, *args)

    def __setitem__(self, *args):
        return _eilig.vecSizeT___setitem__(self, *args)

    def pop(self):
        return _eilig.vecSizeT_pop(self)

    def append(self, x):
        return _eilig.vecSizeT_append(self, x)

    def empty(self):
        return _eilig.vecSizeT_empty(self)

    def size(self):
        return _eilig.vecSizeT_size(self)

    def swap(self, v):
        return _eilig.vecSizeT_swap(self, v)

    def begin(self):
        return _eilig.vecSizeT_begin(self)

    def end(self):
        return _eilig.vecSizeT_end(self)

    def rbegin(self):
        return _eilig.vecSizeT_rbegin(self)

    def rend(self):
        return _eilig.vecSizeT_rend(self)

    def clear(self):
        return _eilig.vecSizeT_clear(self)

    def get_allocator(self):
        return _eilig.vecSizeT_get_allocator(self)

    def pop_back(self):
        return _eilig.vecSizeT_pop_back(self)

    def erase(self, *args):
        return _eilig.vecSizeT_erase(self, *args)

    def __init__(self, *args):
        _eilig.vecSizeT_swiginit(self, _eilig.new_vecSizeT(*args))

    def push_back(self, x):
        return _eilig.vecSizeT_push_back(self, x)

    def front(self):
        return _eilig.vecSizeT_front(self)

    def back(self):
        return _eilig.vecSizeT_back(self)

    def assign(self, n, x):
        return _eilig.vecSizeT_assign(self, n, x)

    def resize(self, *args):
        return _eilig.vecSizeT_resize(self, *args)

    def insert(self, *args):
        return _eilig.vecSizeT_insert(self, *args)

    def reserve(self, n):
        return _eilig.vecSizeT_reserve(self, n)

    def capacity(self):
        return _eilig.vecSizeT_capacity(self)
    __swig_destroy__ = _eilig.delete_vecSizeT

# Register vecSizeT in _eilig:
_eilig.vecSizeT_swigregister(vecSizeT)
class vecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _eilig.vecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _eilig.vecDouble___nonzero__(self)

    def __bool__(self):
        return _eilig.vecDouble___bool__(self)

    def __len__(self):
        return _eilig.vecDouble___len__(self)

    def __getslice__(self, i, j):
        return _eilig.vecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _eilig.vecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _eilig.vecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _eilig.vecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _eilig.vecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _eilig.vecDouble___setitem__(self, *args)

    def pop(self):
        return _eilig.vecDouble_pop(self)

    def append(self, x):
        return _eilig.vecDouble_append(self, x)

    def empty(self):
        return _eilig.vecDouble_empty(self)

    def size(self):
        return _eilig.vecDouble_size(self)

    def swap(self, v):
        return _eilig.vecDouble_swap(self, v)

    def begin(self):
        return _eilig.vecDouble_begin(self)

    def end(self):
        return _eilig.vecDouble_end(self)

    def rbegin(self):
        return _eilig.vecDouble_rbegin(self)

    def rend(self):
        return _eilig.vecDouble_rend(self)

    def clear(self):
        return _eilig.vecDouble_clear(self)

    def get_allocator(self):
        return _eilig.vecDouble_get_allocator(self)

    def pop_back(self):
        return _eilig.vecDouble_pop_back(self)

    def erase(self, *args):
        return _eilig.vecDouble_erase(self, *args)

    def __init__(self, *args):
        _eilig.vecDouble_swiginit(self, _eilig.new_vecDouble(*args))

    def push_back(self, x):
        return _eilig.vecDouble_push_back(self, x)

    def front(self):
        return _eilig.vecDouble_front(self)

    def back(self):
        return _eilig.vecDouble_back(self)

    def assign(self, n, x):
        return _eilig.vecDouble_assign(self, n, x)

    def resize(self, *args):
        return _eilig.vecDouble_resize(self, *args)

    def insert(self, *args):
        return _eilig.vecDouble_insert(self, *args)

    def reserve(self, n):
        return _eilig.vecDouble_reserve(self, n)

    def capacity(self):
        return _eilig.vecDouble_capacity(self)
    __swig_destroy__ = _eilig.delete_vecDouble

# Register vecDouble in _eilig:
_eilig.vecDouble_swigregister(vecDouble)
class arrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _eilig.arrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _eilig.arrDouble___nonzero__(self)

    def __bool__(self):
        return _eilig.arrDouble___bool__(self)

    def __len__(self):
        return _eilig.arrDouble___len__(self)

    def __getslice__(self, i, j):
        return _eilig.arrDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _eilig.arrDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _eilig.arrDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _eilig.arrDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _eilig.arrDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _eilig.arrDouble___setitem__(self, *args)

    def pop(self):
        return _eilig.arrDouble_pop(self)

    def append(self, x):
        return _eilig.arrDouble_append(self, x)

    def empty(self):
        return _eilig.arrDouble_empty(self)

    def size(self):
        return _eilig.arrDouble_size(self)

    def swap(self, v):
        return _eilig.arrDouble_swap(self, v)

    def begin(self):
        return _eilig.arrDouble_begin(self)

    def end(self):
        return _eilig.arrDouble_end(self)

    def rbegin(self):
        return _eilig.arrDouble_rbegin(self)

    def rend(self):
        return _eilig.arrDouble_rend(self)

    def clear(self):
        return _eilig.arrDouble_clear(self)

    def get_allocator(self):
        return _eilig.arrDouble_get_allocator(self)

    def pop_back(self):
        return _eilig.arrDouble_pop_back(self)

    def erase(self, *args):
        return _eilig.arrDouble_erase(self, *args)

    def __init__(self, *args):
        _eilig.arrDouble_swiginit(self, _eilig.new_arrDouble(*args))

    def push_back(self, x):
        return _eilig.arrDouble_push_back(self, x)

    def front(self):
        return _eilig.arrDouble_front(self)

    def back(self):
        return _eilig.arrDouble_back(self)

    def assign(self, n, x):
        return _eilig.arrDouble_assign(self, n, x)

    def resize(self, *args):
        return _eilig.arrDouble_resize(self, *args)

    def insert(self, *args):
        return _eilig.arrDouble_insert(self, *args)

    def reserve(self, n):
        return _eilig.arrDouble_reserve(self, n)

    def capacity(self):
        return _eilig.arrDouble_capacity(self)
    __swig_destroy__ = _eilig.delete_arrDouble

# Register arrDouble in _eilig:
_eilig.arrDouble_swigregister(arrDouble)
class Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _eilig.Vector_swiginit(self, _eilig.new_Vector(*args))
    __swig_destroy__ = _eilig.delete_Vector

    def Resize(self, *args):
        return _eilig.Vector_Resize(self, *args)

    def Fill(self, value):
        return _eilig.Vector_Fill(self, value)

    def __call__(self, *args):
        return _eilig.Vector___call__(self, *args)

    def __add__(self, *args):
        return _eilig.Vector___add__(self, *args)

    def __pos__(self):
        return _eilig.Vector___pos__(self)

    def __sub__(self, *args):
        return _eilig.Vector___sub__(self, *args)

    def __neg__(self):
        return _eilig.Vector___neg__(self)

    def __mul__(self, rhs):
        return _eilig.Vector___mul__(self, rhs)

    def SwapRows(self, row1, row2):
        return _eilig.Vector_SwapRows(self, row1, row2)

    def Region(self, *args):
        return _eilig.Vector_Region(self, *args)

    def GetRows(self):
        return _eilig.Vector_GetRows(self)

    def GetCols(self):
        return _eilig.Vector_GetCols(self)

    def GetValue(self, row):
        return _eilig.Vector_GetValue(self, row)

    def GetData(self):
        return _eilig.Vector_GetData(self)

    def SetValue(self, row, value):
        return _eilig.Vector_SetValue(self, row, value)

    def __str__(self):
        return _eilig.Vector___str__(self)

    def __radd__(self, value):
        return _eilig.Vector___radd__(self, value)

    def __rsub__(self, value):
        return _eilig.Vector___rsub__(self, value)

    def __rmul__(self, value):
        return _eilig.Vector___rmul__(self, value)

# Register Vector in _eilig:
_eilig.Vector_swigregister(Vector)
cvar = _eilig.cvar
headerEilig = cvar.headerEilig
axis_x = cvar.axis_x
axis_y = cvar.axis_y
axis_z = cvar.axis_z

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _eilig.Matrix_swiginit(self, _eilig.new_Matrix(*args))
    __swig_destroy__ = _eilig.delete_Matrix

    def Resize(self, *args):
        return _eilig.Matrix_Resize(self, *args)

    def Fill(self, value):
        return _eilig.Matrix_Fill(self, value)

    def __call__(self, *args):
        return _eilig.Matrix___call__(self, *args)

    def __add__(self, *args):
        return _eilig.Matrix___add__(self, *args)

    def __pos__(self):
        return _eilig.Matrix___pos__(self)

    def __sub__(self, *args):
        return _eilig.Matrix___sub__(self, *args)

    def __neg__(self):
        return _eilig.Matrix___neg__(self)

    def __mul__(self, *args):
        return _eilig.Matrix___mul__(self, *args)

    def SwapRows(self, row1, row2):
        return _eilig.Matrix_SwapRows(self, row1, row2)

    def SwapCols(self, cols1, cols2):
        return _eilig.Matrix_SwapCols(self, cols1, cols2)

    def Transpose(self):
        return _eilig.Matrix_Transpose(self)

    def Diagonal(self):
        return _eilig.Matrix_Diagonal(self)

    def Lower(self, diag):
        return _eilig.Matrix_Lower(self, diag)

    def LowerWithDiagonal(self):
        return _eilig.Matrix_LowerWithDiagonal(self)

    def LowerWithoutDiagonal(self):
        return _eilig.Matrix_LowerWithoutDiagonal(self)

    def Upper(self, diag):
        return _eilig.Matrix_Upper(self, diag)

    def UpperWithDiagonal(self):
        return _eilig.Matrix_UpperWithDiagonal(self)

    def UpperWithoutDiagonal(self):
        return _eilig.Matrix_UpperWithoutDiagonal(self)

    def Region(self, *args):
        return _eilig.Matrix_Region(self, *args)

    def GetRows(self):
        return _eilig.Matrix_GetRows(self)

    def GetCols(self):
        return _eilig.Matrix_GetCols(self)

    def GetValue(self, row, col):
        return _eilig.Matrix_GetValue(self, row, col)

    def GetData(self):
        return _eilig.Matrix_GetData(self)

    def SetValue(self, row, col, value):
        return _eilig.Matrix_SetValue(self, row, col, value)

    def __str__(self):
        return _eilig.Matrix___str__(self)

    def __radd__(self, value):
        return _eilig.Matrix___radd__(self, value)

    def __rsub__(self, value):
        return _eilig.Matrix___rsub__(self, value)

    def __rmul__(self, value):
        return _eilig.Matrix___rmul__(self, value)

# Register Matrix in _eilig:
_eilig.Matrix_swigregister(Matrix)
class Ellpack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _eilig.Ellpack_swiginit(self, _eilig.new_Ellpack(*args))
    __swig_destroy__ = _eilig.delete_Ellpack

    def IsUsed(self, *args):
        return _eilig.Ellpack_IsUsed(self, *args)

    def Add(self, row, col):
        return _eilig.Ellpack_Add(self, row, col)

    def Remove(self, row, col):
        return _eilig.Ellpack_Remove(self, row, col)

    def Resize(self, *args):
        return _eilig.Ellpack_Resize(self, *args)

    def Fill(self, value):
        return _eilig.Ellpack_Fill(self, value)

    def Dump(self):
        return _eilig.Ellpack_Dump(self)

    def __call__(self, *args):
        return _eilig.Ellpack___call__(self, *args)

    def __add__(self, *args):
        return _eilig.Ellpack___add__(self, *args)

    def __pos__(self):
        return _eilig.Ellpack___pos__(self)

    def __sub__(self, *args):
        return _eilig.Ellpack___sub__(self, *args)

    def __neg__(self):
        return _eilig.Ellpack___neg__(self)

    def __mul__(self, *args):
        return _eilig.Ellpack___mul__(self, *args)

    def SwapRows(self, row1, row2):
        return _eilig.Ellpack_SwapRows(self, row1, row2)

    def SwapCols(self, col1, col2):
        return _eilig.Ellpack_SwapCols(self, col1, col2)

    def Transpose(self):
        return _eilig.Ellpack_Transpose(self)

    def Diagonal(self):
        return _eilig.Ellpack_Diagonal(self)

    def Lower(self, diag):
        return _eilig.Ellpack_Lower(self, diag)

    def LowerWithDiagonal(self):
        return _eilig.Ellpack_LowerWithDiagonal(self)

    def LowerWithoutDiagonal(self):
        return _eilig.Ellpack_LowerWithoutDiagonal(self)

    def Upper(self, diag):
        return _eilig.Ellpack_Upper(self, diag)

    def UpperWithDiagonal(self):
        return _eilig.Ellpack_UpperWithDiagonal(self)

    def UpperWithoutDiagonal(self):
        return _eilig.Ellpack_UpperWithoutDiagonal(self)

    def Region(self, *args):
        return _eilig.Ellpack_Region(self, *args)

    def GetRows(self):
        return _eilig.Ellpack_GetRows(self)

    def GetCols(self):
        return _eilig.Ellpack_GetCols(self)

    def GetWidth(self):
        return _eilig.Ellpack_GetWidth(self)

    def GetValue(self, row, col):
        return _eilig.Ellpack_GetValue(self, row, col)

    def GetCount(self):
        return _eilig.Ellpack_GetCount(self)

    def GetPosition(self):
        return _eilig.Ellpack_GetPosition(self)

    def GetData(self):
        return _eilig.Ellpack_GetData(self)

    def SetValue(self, row, col, value):
        return _eilig.Ellpack_SetValue(self, row, col, value)

    def __str__(self):
        return _eilig.Ellpack___str__(self)

    def __radd__(self, value):
        return _eilig.Ellpack___radd__(self, value)

    def __rsub__(self, value):
        return _eilig.Ellpack___rsub__(self, value)

    def __rmul__(self, value):
        return _eilig.Ellpack___rmul__(self, value)

# Register Ellpack in _eilig:
_eilig.Ellpack_swigregister(Ellpack)

def NormMax(_in):
    return _eilig.NormMax(_in)

def NormP(*args):
    return _eilig.NormP(*args)

def NormP2(*args):
    return _eilig.NormP2(*args)

def Dot(in1, in2):
    return _eilig.Dot(in1, in2)

def Cross(in1, in2):
    return _eilig.Cross(in1, in2)

def DeterminantLUP(LU, permutation):
    return _eilig.DeterminantLUP(LU, permutation)

def Determinant(A):
    return _eilig.Determinant(A)

def Inverse(A):
    return _eilig.Inverse(A)

def ScaleByVector(A, alpha):
    return _eilig.ScaleByVector(A, alpha)

def Solve(A, b):
    return _eilig.Solve(A, b)

def DecomposeLUP(LU, permutation, A):
    return _eilig.DecomposeLUP(LU, permutation, A)

def InverseLUP(IA, LU, permutation):
    return _eilig.InverseLUP(IA, LU, permutation)

def DiagonalLinearSystem(*args):
    return _eilig.DiagonalLinearSystem(*args)

def ForwardLinearSystem(*args):
    return _eilig.ForwardLinearSystem(*args)

def DirectLUP(x, LU, permutation, b):
    return _eilig.DirectLUP(x, LU, permutation, b)

def IterativJacobi(x, A, b, rtol=0.001, itmax=0):
    return _eilig.IterativJacobi(x, A, b, rtol, itmax)

def IterativGauss(x, A, b, rtol=0.001, itmax=0):
    return _eilig.IterativGauss(x, A, b, rtol, itmax)

def IterativCG(x, A, b, rtol=0.001, itmax=0):
    return _eilig.IterativCG(x, A, b, rtol, itmax)

def IterativBiCGStab(x, A, b, rtol=0.001, itmax=0):
    return _eilig.IterativBiCGStab(x, A, b, rtol, itmax)

def WriteToFile(*args):
    return _eilig.WriteToFile(*args)

def ReadFromFile(*args):
    return _eilig.ReadFromFile(*args)

def ListVector(vector):
    return _eilig.ListVector(vector)

def ListMatrix(*args):
    return _eilig.ListMatrix(*args)

def RotationMatrix(*args):
    return _eilig.RotationMatrix(*args)

def Rotate(*args):
    return _eilig.Rotate(*args)

def Translate(point, axis, value):
    return _eilig.Translate(point, axis, value)

def Mirror(point, axis):
    return _eilig.Mirror(point, axis)

def Scale(point, value):
    return _eilig.Scale(point, value)

def TablePointsRotate(input, axis, radians):
    return _eilig.TablePointsRotate(input, axis, radians)

def TablePointsTranslate(input, axis, value):
    return _eilig.TablePointsTranslate(input, axis, value)

def TablePointsMirror(input, axis):
    return _eilig.TablePointsMirror(input, axis)

def TablePointsScale(input, value):
    return _eilig.TablePointsScale(input, value)

def TableValuesScale(input, value):
    return _eilig.TableValuesScale(input, value)

def TableValuesAdd(input, value):
    return _eilig.TableValuesAdd(input, value)

def TableValuesClipBiggerThan(input, value, col):
    return _eilig.TableValuesClipBiggerThan(input, value, col)

def TableValuesClipSmallerThan(input, value, col):
    return _eilig.TableValuesClipSmallerThan(input, value, col)

def TableAppend(input1, input2):
    return _eilig.TableAppend(input1, input2)


def GetItemVector(self, index):
    return self.GetValue(index)

def SetItemVector(self, index, value):
    return self.SetValue(index, value)

Vector.__getitem__ = GetItemVector
Vector.__setitem__ = SetItemVector

def GetItemMatrix(self, index):
    return self.GetValue(index[0], index[1])

def SetItemMatrix(self, index, value):
    return self.SetValue(index[0], index[1], value)

Matrix.__getitem__ = GetItemMatrix
Matrix.__setitem__ = SetItemMatrix

def GetItemEllpack(self, index):
    return self.GetValue(index[0], index[1])

def SetItemEllpack(self, index, value):
    return self.SetValue(index[0], index[1], value)

Ellpack.__getitem__ = GetItemEllpack
Ellpack.__setitem__ = SetItemEllpack



